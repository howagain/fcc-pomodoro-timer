{"version":3,"sources":["Sounds/Elevator-ding-sound-effect.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","breakLength","setBreakLength","sessionLength","setSessionLength","timeRemaining","setTimeRemaining","isActive","setIsActive","isSession","setIsSession","audioRef","useRef","useEffect","interval","current","play","setTimeout","switchSession","setInterval","clearInterval","wasSession","handleTimeChange","toAdjust","change","prevState","console","error","className","id","onClick","disabled","seconds","time","Date","getUTCHours","toISOString","substr","getMinutes","formatTime","pause","currentTime","ref","src","SFX","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b1fd3d9c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Elevator-ding-sound-effect.09bb07c0.mp3\";","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.scss\";\nimport SFX from \"./Sounds/Elevator-ding-sound-effect.mp3\";\n\nfunction App() {\n  const [breakLength, setBreakLength] = useState(5);\n  const [sessionLength, setSessionLength] = useState(59);\n  const [timeRemaining, setTimeRemaining] = useState(25 * 60);\n  const [isActive, setIsActive] = useState(false);\n  const [isSession, setIsSession] = useState(true);\n  const audioRef = useRef(null);\n\n  const formatTime = (seconds) => {\n    let time = new Date(seconds * 1000);\n    if (time.getUTCHours() === 0) {\n      return time.toISOString().substr(14, 5);\n    } else {\n      return `${\n        time.getUTCHours() * 60 + time.getMinutes()\n      }:${time.toISOString().substr(17, 2)}`; //converts more than 1 hour to minutes\n    }\n  };\n\n  useEffect(() => {\n    let interval = null;\n    if (timeRemaining === 0) {\n      audioRef.current.play();\n      setTimeout(() => switchSession(), 1000);\n    }\n    if (isActive && timeRemaining > 0) {\n      interval = setInterval(() => {\n        setTimeRemaining((timeRemaining) => timeRemaining - 1);\n      }, 1000);\n    } else if (!isActive || timeRemaining < 0) {\n      clearInterval(interval);\n      switchSession();\n    }\n    return () => clearInterval(interval);\n  }, [isActive, timeRemaining]);\n\n  const switchSession = () => {\n    if (timeRemaining > 0) return;\n    else {\n      setIsSession((wasSession) => {\n        //check what to set the time to\n        if (wasSession === true) {\n          setTimeRemaining(breakLength * 60);\n        } else {\n          setTimeRemaining(sessionLength * 60);\n        }\n        //toggle the session type\n        return !wasSession;\n      });\n    }\n  };\n\n  const handleTimeChange = (toAdjust, change) => {\n    switch (toAdjust) {\n      case \"session\":\n        if (sessionLength + change > 0 && sessionLength + change <= 60) {\n          setSessionLength((prevState) => prevState + change);\n        }\n        break;\n      case \"break\":\n        if (breakLength + change > 0 && breakLength + change <= 60) {\n          setBreakLength((prevState) => prevState + change);\n        }\n        break;\n      default:\n        console.error(\n          \"Uh oh... You're trying to adjust the clock in a way that's not correct\"\n        );\n        break;\n    }\n  };\n\n  useEffect(() => {\n    if (!isActive) {\n      if (isSession) {\n        setTimeRemaining(sessionLength * 60); //converts mins to seconds\n      } else {\n        setTimeRemaining(breakLength * 60); //converts mins to seconds\n      }\n    }\n  }, [sessionLength, breakLength]);\n\n  const resetTimer = () => {\n    audioRef.current.pause();\n    audioRef.current.currentTime = 0;\n    setIsActive(false);\n    setSessionLength(25);\n    setBreakLength(5);\n    setTimeRemaining(25 * 60);\n    setIsSession(true);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"title\">Pomodoro Clock</h1>\n        <div className=\"break-controls\">\n          <h2 id=\"break-label\" className=\"option-label\">Break Length</h2>\n          <button\n            id=\"break-decrement\"\n            onClick={() => handleTimeChange(\"break\", -1)}\n            disabled={isActive}\n          >\n            Decrease\n          </button>\n          <p id=\"break-length\">{breakLength}</p>\n          <button\n            id=\"break-increment\"\n            onClick={() => handleTimeChange(\"break\", 1)}\n            disabled={isActive}\n          >\n            Increase\n          </button>\n        </div>\n        <div className=\"session-controls\">\n          <h2 id=\"session-label\" className=\"option-label\">Session Length</h2>\n          <button\n            id=\"session-decrement\"\n            onClick={() => handleTimeChange(\"session\", -1)}\n            disabled={isActive}\n          >\n            Decrease\n          </button>\n          <p id=\"session-length\">{sessionLength}</p>\n          <button\n            id=\"session-increment\"\n            onClick={() => handleTimeChange(\"session\", 1)}\n            disabled={isActive}\n          >\n            Increase\n          </button>\n        </div>\n        <div className=\"timer-container\">\n          <h2>Time Remaining</h2>\n          <p id=\"timer-label\">{isSession ? \"Session\" : \"Break\"}</p>\n          <p id=\"time-left\">{formatTime(timeRemaining)}</p>\n          <button id=\"start_stop\" onClick={() => setIsActive(!isActive)}>\n            Toggle Timer\n          </button>\n          <button id=\"reset\" onClick={resetTimer}>\n            Reset Timer\n          </button>\n          <button\n            onClick={() => {\n              setTimeRemaining(1);\n            }}\n          >\n            Set time to 1s\n          </button>\n          <audio id=\"beep\" ref={audioRef} src={SFX}></audio>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}